generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  full_name         String?
  password          String?
  createdAt         DateTime           @default(now())
  clerk_id          String             @unique
  profile_image_url String?
  updatedAt         DateTime           @updatedAt
  first_name        String?
  last_name         String?
  installations     UserInstallation[]
}

model Installation {
  id           Int                @id
  accountId    Int
  accountLogin String
  accountType  String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  repositories Repository[]
  userLinks    UserInstallation[]
}

model UserInstallation {
  userId         String
  installationId Int
  role           String?
  assignedAt     DateTime     @default(now())
  installation   Installation @relation(fields: [installationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])

  @@id([userId, installationId])
}

model Repository {
  id             String       @id @default(uuid())
  githubRepoId   Int          @unique
  name           String
  fullName       String
  installationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  owner          String
  languages      Language[]
  installation   Installation @relation(fields: [installationId], references: [id], onDelete: Cascade)
  summaries      Summary[]
}

model Summary {
  id            String        @id @default(uuid())
  pullRequestId Int
  title         String
  body          String
  diff          String
  summary       String
  repositoryId  String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  repository    Repository    @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
}

model Language {
  id            String        @id @default(uuid())
  name          String
  bytes         Int
  repositoryId  Int
  repository    Repository    @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([name, repositoryId])
}
