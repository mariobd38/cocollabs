generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_DATABASE_URL")
  directUrl = env("NEXT_DIRECT_URL")
}

model User {
  id                String              @id @default(uuid())
  clerk_id          String              @unique
  email             String              @unique
  full_name         String?
  first_name        String?
  last_name         String?
  password          String?
  profile_image_url String?
  installations     UserInstallation[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Installation {
  id             Int                    @id
  accountId      Int
  accountLogin   String
  accountType    String
  repositories   Repository[]
  userLinks      UserInstallation[]
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
}

model UserInstallation {
  userId         String
  installationId Int
  role           String?
  assignedAt     DateTime               @default(now())
  user           User                   @relation(fields: [userId], references: [id])
  installation   Installation           @relation(fields: [installationId], references: [id], onDelete: Cascade)

  @@id([userId, installationId])
}

model Repository {
  id              String                @id @default(uuid())
  githubRepoId    Int                   @unique
  name            String
  fullName        String
  installationId  Int
  installation    Installation          @relation(fields: [installationId], references: [id], onDelete: Cascade)
  summaries       Summary[]
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
}

model Summary {
  id            String                  @id @default(uuid())
  pullRequestId Int
  title         String
  body          String
  diff          String
  summary       String
  repositoryId  String
  repository    Repository              @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
}